import { router } from "expo-router";
import { useEffect, useState } from "react";

export function useAuth() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  console.log("ðŸ”‘ useAuth render:", { isAuthenticated, isLoading });

  useEffect(() => {
    // Verificar se o usuÃ¡rio jÃ¡ estÃ¡ autenticado
    checkAuthStatus();
  }, []);

  const checkAuthStatus = async () => {
    try {
      // Aqui vocÃª pode implementar a lÃ³gica para verificar se o usuÃ¡rio estÃ¡ autenticado
      // Por exemplo, verificar um token no AsyncStorage, etc.
      console.log("ðŸ”‘ checkAuthStatus executado");
      setIsLoading(false);
    } catch (error) {
      console.error("Erro ao verificar status de autenticaÃ§Ã£o:", error);
      setIsLoading(false);
    }
  };

  const signIn = async () => {
    try {
      // Implementar lÃ³gica de login
      router.replace("/(tabs)");
      setIsAuthenticated(true);
      // Removido router.replace para evitar conflito com o useEffect no _layout.tsx
    } catch (error) {
      console.error("Erro no login:", error);
    }
  };

  const signOut = async () => {
    try {
      // Implementar lÃ³gica de logout
      router.replace("/auth");
      setIsAuthenticated(false);
      console.log("ðŸ”‘ useAuth: signOut executado");
      // Removido router.replace para evitar conflito com o useEffect no _layout.tsx
    } catch (error) {
      console.error("Erro no logout:", error);
    }
  };

  return {
    isAuthenticated,
    isLoading,
    signIn,
    signOut,
  };
}
